class srParser(actionTable, gotoTable, stateTable) {
    mActionTable := actionTable;
    mGotoTable   := gotoTable;
    mStateTable  := stateTable;

    parseSR := procedure(tl) {
        index   := 1;      // point to next token
        symbols := [];     // stack of symbols
        states  := ["s0"]; // stack of states, 0 is start state
        while (true) {            
            q := states[-1];
            t := tl[index];
            print("states:  [ $join(states, \", \")$ ]");
            print("symbols: $join(symbols, \" \")$ | $join(tl[index ..], \" \")$");
            print("state:   { $join(mStateTable[q], \", \")$ }");
            p := mActionTable[q,t];
            match (p) {
            case om: 
                 print("action($q$, $t$) undefined.");
                 print("Syntax error!\n");
                 return false;
            case @Shift(s):
                 print("shifting state $s$");
                 print("state:   { $join(mStateTable[s], \", \")$ }\n");
                 symbols := symbols + [t];
                 states  := states  + [s];
                 index   += 1;
            case @Rule(head, body):
                 print("reducing with rule $head$ -> $join(body, \" \")$");
                 n       := #body;
                 symbols := symbols[.. -(n+1)];
                 states  := states[.. -(n+1)]; 
                 symbols := symbols + [head];
                 state   := states[-1];
                 states  := states + [ mGotoTable[state, head] ];
                 print("state:   { $join(mStateTable[mGotoTable[state, head]], \", \")$ }\n");
            case @Accept():
                 print("accepting\n");
                 return true;
            } 
        }
    };
}

////////////////////////////////////////////////////////////////////////
//                                                                    //
//    Parse Table                                                     //
//                                                                    //
////////////////////////////////////////////////////////////////////////

r1 := @Rule("E", ["E", "+", "P"]);
r2 := @Rule("E", ["E", "-", "P"]);
r3 := @Rule("E", ["P"]);

r4 := @Rule("P", ["P", "*", "F"]);
r5 := @Rule("P", ["P", "/", "F"]);
r6 := @Rule("P", ["F"]);

r7 := @Rule("F", ["(", "E", ")"]);
r8 := @Rule("F", ["int"]);

actionTable := {};

actionTable["s0", "("  ] := @Shift("s5");
actionTable["s0", "int"] := @Shift("s2");

actionTable["s1", "EOF"] := r6;
actionTable["s1", "+"  ] := r6;
actionTable["s1", "-"  ] := r6;
actionTable["s1", "*"  ] := r6;
actionTable["s1", "/"  ] := r6;
actionTable["s1", ")"  ] := r6;

actionTable["s2", "EOF"] := r8;
actionTable["s2", "+"  ] := r8;
actionTable["s2", "-"  ] := r8;
actionTable["s2", "*"  ] := r8;
actionTable["s2", "/"  ] := r8;
actionTable["s2", "("  ] := r8;
actionTable["s2", ")"  ] := r8;

actionTable["s3", "EOF"] := r3;
actionTable["s3", "+"  ] := r3;
actionTable["s3", "-"  ] := r3;
actionTable["s3", "*"  ] := @Shift("s12");
actionTable["s3", "/"  ] := @Shift("s11");
actionTable["s3", ")"  ] := r3;

actionTable["s4", "EOF"] := @Accept();
actionTable["s4", "+"  ] := @Shift("s8");
actionTable["s4", "-"  ] := @Shift("s9");

actionTable["s5", "("  ] := @Shift("s5");
actionTable["s5", "int"] := @Shift("s2");

actionTable["s6", "+"  ] := @Shift("s8");
actionTable["s6", "-"  ] := @Shift("s9");
actionTable["s6", ")"  ] := @Shift("s7");

actionTable["s7", "EOF"] := r7;
actionTable["s7", "+"  ] := r7;
actionTable["s7", "-"  ] := r7;
actionTable["s7", "*"  ] := r7;
actionTable["s7", "/"  ] := r7;
actionTable["s7", ")"  ] := r7;

actionTable["s8", "("  ] := @Shift("s5");
actionTable["s8", "int"] := @Shift("s2");

actionTable["s9", "("  ] := @Shift("s5");
actionTable["s9", "int"] := @Shift("s2");

actionTable["s10", "EOF"] := r2;
actionTable["s10", "+" ] := r2;
actionTable["s10", "-" ] := r2;
actionTable["s10", "*" ] := @Shift("s12");
actionTable["s10", "/" ] := @Shift("s11");
actionTable["s10", ")" ] := r2;

actionTable["s11", "("  ] := @Shift("s5");
actionTable["s11", "int"] := @Shift("s2");

actionTable["s12", "("  ] := @Shift("s5");
actionTable["s12", "int"] := @Shift("s2");

actionTable["s13", "EOF"] := r4;
actionTable["s13", "+"  ] := r4;
actionTable["s13", "-"  ] := r4;
actionTable["s13", "*"  ] := r4;
actionTable["s13", "/"  ] := r4;
actionTable["s13", ")"  ] := r4;

actionTable["s14", "EOF"] := r5;
actionTable["s14", "+"  ] := r5;
actionTable["s14", "-"  ] := r5;
actionTable["s14", "*"  ] := r5;
actionTable["s14", "/"  ] := r5;
actionTable["s14", ")"  ] := r5;

actionTable["s15", "EOF"] := r1;
actionTable["s15", "+"  ] := r1;
actionTable["s15", "-"  ] := r1;
actionTable["s15", "*"  ] := @Shift("s12");
actionTable["s15", "/"  ] := @Shift("s11");
actionTable["s15", ")"  ] := r1;

gotoTable   := {};

gotoTable["s0", "E"] := "s4";
gotoTable["s0", "P"] := "s3";
gotoTable["s0", "F"] := "s1";

gotoTable["s5", "E"] := "s6";
gotoTable["s5", "P"] := "s3";
gotoTable["s5", "F"] := "s1";

gotoTable["s8", "P"] := "s15";
gotoTable["s8", "F"] := "s1";

gotoTable["s9", "P"] := "s10";
gotoTable["s9", "F"] := "s1";

gotoTable["s11", "F"] := "s14";
gotoTable["s12", "F"] := "s13";

stateTable := {};

stateTable["s0"] := 
    { "S -> * E", 
      "E -> * E '+' P", "E -> * E '-' P", "E -> * P", 
      "P -> * P '*' F", "P -> * P '/' F", "P -> * F", 
      "F -> * '(' E ')'", "F -> * int"
    };

stateTable["s1"] := { "P -> F *" }; 

stateTable["s2"] := { "F -> 'int' *" }; 

stateTable["s3"] := { "P -> P * '*' F", "P -> P * '/' F", "E -> P *" }; 

stateTable["s4"] := { "S -> E *", "E -> E * '+' P", "E -> E * '-' P" };

stateTable["s5"] := 
      { "F -> '(' * E ')'", 
        "E -> * E '+' P", "E -> * E '-' P", "E -> * P", 
        "P -> * P '*' F", "P -> * P '/' F", "P -> * F", 
        "F -> * '(' E ')'", "F -> * int"
      };

stateTable["s6"] := { "F -> '(' E * ')'", "E -> E * '+' P", "E -> E * '-' P" };

stateTable["s7"] := { "F -> '(' E ')' *" };

stateTable["s8"] := 
      { "E -> E '+' * P",
        "P -> * P '*' F", "P -> * P '/' F", "P -> * F", 
        "F -> * '(' E ')'", "F -> * int"
      };

stateTable["s9"] := 
      { "E -> E '-' * P",
        "P -> * P '*' F", "P -> * P '/' F", "P -> * F", 
        "F -> * '(' E ')'", "F -> * int"
      };

stateTable["s10"] := { "E -> E '-' P *", "P -> P * '*' F", "P -> P * '/' F" };

stateTable["s11"] := { "P -> P '/' * F", "F -> * '(' E ')'", "F -> * int" }; 

stateTable["s12"] := { "P -> P '*' * F", "F -> * '(' E ')'", "F -> * int" }; 

stateTable["s13"] := { "P -> P '*' F *" }; 

stateTable["s14"] := { "P -> P '/' F *" }; 

stateTable["s15"] := { "E -> E '+' P *", "P -> P * '*' F", "P -> P * '/' F" };

////////////////////////////////////////////////////////////////////////

myParse := closure(s) {
    parser := srParser(actionTable, gotoTable, stateTable);
    tl := tokenizeString(s);
    print("tokenlist: $tl$\n");
    if (parser.parseSR(tl + ["EOF"])) {
        print("Parse successful!");
    } else {
        print("Parse failed!");
    }
};

// This procedure partitions the string s into a list of tokens.
// It recognizes numbers, the operator symbols "+", "-", "*", "/", "**"
// and the parentheses "(" and ")".
tokenizeString := procedure(s) {
    tokenList := [];
    scan (s) {
        regex '0|[1-9][0-9]*' as [ number   ]: tokenList += [ "int"    ];
        regex '[-+*/()]'      as [ operator ]: tokenList += [ operator ];
        regex '[ \t\n\r]+'                   : // skip
    }
    return tokenList;
};

myParse("1+2*3");
