load("toTerm.stlx");
ln := log;  // use the European name for the natural logarithm

// differentiate the term t with respect to the variable x
diff := procedure(t, x) {
    match (t) {
        case t1 + t2:
             return diff(t1, x) + diff(t2, x);
        case t1 - t2:
             return diff(t1, x) - diff(t2, x);
        case t1 * t2:
             return diff(t1, x) * t2 + t1 * diff(t2, x);
        case t1 / t2:
             return ( diff(t1, x) * t2 - t1 * diff(t2, x) ) / (t2 * t2);
        case f ** 0:
             return 0;
        case f ** n | isNumber(n) && n != 0 : 
             return n * diff(f, x) * f ** (n-1);
        case f ** g:
             return diff( ^exp(g * ^ln(f)), x);
        case ^sqrt(a):
             return 1/2 * diff(a, x) / t;
        case ^sin(a):
             return diff(a, x) * ^cos(a);
        case ^cos(a):
             return -diff(a, x) * ^sin(a);
        case ^tan(a):
             return diff(a, x) / ^cos(x) ** 2;
        case ^asin(a):
             return diff(a, x) / ^sqrt(1 - a ** 2);
        case ^acos(a):
             return - diff(a, x) / ^sqrt(1 - a ** 2);
        case ^atan(a):
             return diff(a,x) / (1 + a ** 2);
        case ^ln(a):
             return diff(a, x) / a;
        case ^exp(a):
             return diff(a, x) * ^exp(a);
        case var | var == x :
             return 1;
        case var | isVariable(var) :
             return 0;
        case t | isNumber(t):
             return 0;
        default:
            abort("error: $t$");
    }
};

test := procedure(s) {
    d := diff(parseTerm(s), parseTerm("x"));
    print("d/dx($s$) = $d$\n");
};

test("1"); 
test("x");
test("1 / x"); 
test("y");
test("x + y");
test("x ** 2");
test("x"); 
test("1 - x"); 
test("x * x"); 
test("c * x + d"); 
test("x - x - x"); 
test("x - (x - x)"); 
test("x / x");
test("sin(x)");
test("sin(x) / cos(x)"); 
test("tan(x)"); 
test("sqrt(x)"); 
test("asin(x)"); 
test("acos(x)"); 
test("atan(x)"); 
test("exp(x)"); 
test("ln(x)"); 
test("exp(ln(x))"); 
test("ln(exp(x))"); 
test("(x + x) * (x + x)");
test("x / x");
test("x ** 2");
test("x ** x");

