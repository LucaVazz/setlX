// This function computes a regular expression that is equivalent to the
// deterministic finite state machine given as argument.
dfa2RegExp := procedure(dfa) {
    [states, sigma, delta, q0, accepting] := dfa;
    return simplify(regexpSum({ rpq(q0, p, sigma, delta, states) : p in accepting }));
};
// This function takes a set s = { r1, ..., rn } of regular expressions
// as argument.  It returns the regular expression r1 + ... + rn.
regexpSum := procedure(s) {
    match (s) {
        case {}:
             return 0;
        case { r }:
             return r;
        case { r | rs }:
             return @Or(r, regexpSum(rs));
    }
};
// compute the regular expression to get from state p1 to state p2
// using states from the set of states allowed inbetween.
rpq := procedure(p1, p2, sigma, delta, allowed) {
    match (allowed) {
        case {}: 
             allChars := { c : c in sigma | delta(p1, c) == p2 };
             sum := regexpSum(allChars);
             if (p1 == p2) {
                 if (allChars == {}) {
                     return "";
                 } else {
                     return @Or("", sum);
                 }
             } else {
                 return sum;
             }
        case { qk | restAllowed }:
             rkp1p2 := rpq(p1, p2, sigma, delta, restAllowed);
             rkp1qk := rpq(p1, qk, sigma, delta, restAllowed);
             rkqkqk := rpq(qk, qk, sigma, delta, restAllowed);
             rkqkp2 := rpq(qk, p2, sigma, delta, restAllowed);
             return simplify(@Or(rkp1p2, @Cat(@Cat(rkp1qk, @Star(rkqkqk)), rkqkp2)));
    }    
};
simplify := procedure(r) {
    while (true) {
        oldR := r;
        r    := simplifyOnce(r);
        if (r == oldR) {
            return r;
        }
    }
};
simplifyOnce := procedure(r) {
    match (r) {
        case 0:
             return 0;
        case "": 
             return "";
        case c | isString(c):
             return c;
        case @Or(0, s):  
             return simplifyOnce(s);
        case @Or(s, 0):  
             return simplifyOnce(s);
        case @Or(s, s):  
             return simplifyOnce(s);
        case @Or("", @Cat(t, @Star(t))):
             return @Star(t);
        case @Or("", @Cat(@Star(t), t)):
             return @Star(t);
        case @Or(@Cat(t, @Star(t)), ""):
             return @Star(t);
        case @Or(@Cat(@Star(t), t), ""):
             return @Star(t);
        case @Or(s, @Cat(s,t)):
             return simplifyOnce(@Cat(s, @Or("", t)));
        case @Or(s, @Cat(t,s)):
             return simplifyOnce(@Cat(@Or("", t), s));
        case @Or(s, t):  
             return @Or(simplifyOnce(s), simplifyOnce(t));
        case @Cat(0, s): 
             return 0;
        case @Cat(s, 0): 
             return 0;
        case @Cat("", s): 
             return s;
        case @Cat(s, ""): 
             return s;
        case @Cat(@Or("", s), @Star(s)):
             return @Star(simplifyOnce(s));
        case @Cat(@Or(s, ""), @Star(s)):
             return @Star(simplifyOnce(s));
        case @Cat(@Star(s), @Or(s, "")):
             return @Star(simplifyOnce(s));
        case @Cat(@Star(s), @Or("", s)):
             return @Star(simplifyOnce(s));
        case @Cat(s, t): 
             return @Cat(simplifyOnce(s), simplifyOnce(t));
        case @Star(0):
             return "";
        case @Star(""):
             return "";
        case @Star(@Or("", s)):
             return simplifyOnce(@Star(s));
        case @Star(@Or(s, "")):
             return simplifyOnce(@Star(s));
        case @Star(c):
             return @Star(simplifyOnce(c));
        default:        
        abort("Syntax error in simplifyOnce($r$)");
    }
};

regexp2String := procedure(r) {
    match (r) {
        case 0 : 
             return "0";
        case "": 
             return "\"\"";
        case c | isString(c) && #c == 1: 
             return c;
        case @Cat(r1, r2): 
             return regexp2String(r1) + regexp2String(r2);        
        case @Or(r1, r2) : 
             return "(" + regexp2String(r1) + "+" + regexp2String(r2) + ")";
        case @Star(r0) : 
             return "(" + regexp2String(r0) + ")*";
        default: abort("$r$ is not a suitable regular expression");
    }
};

// convert a DFA into a string
dfa2string := procedure(dfa) {
    [states, sigma, deltaNew, q0, final] := dfa;
    result := "";
    n := 0;
    statesToNames := {};
    for (q in states) {
        statesToNames += { [q, "S" + n] };
        n += 1;
    }
    result += "states: { S0, ..., S$n-1$ }\n\n";   
    result += "start state: $statesToNames[q0]$\n\n";
    result += "state encoding:\n";
    for (q in states) {
        result += "$statesToNames[q]$ = $q$\n";
    }
    result += "\ntransitions:\n";
    for (q in states, c in sigma) {
        if (deltaNew(q, c) != om) {
            result += "delta($statesToNames[q]$, $c$) = $statesToNames[deltaNew(q, c)]$\n";
        }
    }
    result += "\nset of accepting states: {";
    result += join({ statesToNames[q] : q in final }, ", ");
    result += "}\n";
    return result;
};

// converts a dfa into dot-format
dfa2dot := procedure(dfa, file) {
    [states, sigma, deltaNew, q0, final] := dfa;
    result := "";
    n := 0;              // used to assign names to states
    statesToNames := {}; // assigns a name to every state
    for (q in states) {
        statesToNames += { [q, "q" + n] };
        n += 1;
    }
    startName := statesToNames[q0];
    result += "digraph G {\n";
    result += "    rankdir = LR;\n";
    result += "    size = \"5,7\";\n";
    result += "    1 -> $startName$;\n";
    result += "    1 [label=\"\",width=0.00001,height=0.00001];\n";
    for (q in states) {
        result += "    " + statesToNames[q];
        if (q in final) {
            result += " [peripheries=2]";
        }
        result += ";\n";
    }
    for (q in states, c in sigma) {
        p := deltaNew(q, c);
        if (p != om) {
            result += "    $statesToNames[q]$ -> $statesToNames[p]$ ";
            result += "[label = \"$c$\"];\n";
        }
    }
    result += "}\n";
    writeFile("$file$.dot", [ result ]);
    run("dot -Tps $file$.dot -o $file$.eps");
    run("open $file$.eps");
};  

delta := procedure(q, c) {
    match ([q, c]) {
        case [0, "a"]: return 0;
        case [0, "b"]: return 1;
        case [1, "a"]: return 1;
    }
};

f := [ {0,1}, {"a", "b"}, delta, 0, {1} ];
print(dfa2string(f));
// dfa2dot(f, "dfa");
r := dfa2RegExp(f);
print("regular expression: $regexp2String(r)$");
