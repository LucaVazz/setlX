// Take a term produced by the function parse and transform it into
// a term that has a much simpler structure.
toTerm := procedure(t) {
    if (isNumber(t) || isString(t)) {
        return t;
    }
    fctSymbol := fct(t);
    arguments := args(t);
    if (fctSymbol == "@@@call") {
        fctName         := args(arguments[1])[1];
        transformedArgs := toTermList(arguments[2]);
        extraArgs       := arguments[3];
        if (extraArgs == "nil") {
            return makeTerm(fctName, transformedArgs);
        } else {
            transformedArgs += toTermList(extraArgs);
            return makeTerm(fctName, transformedArgs);
        }
    }
    if (fctSymbol == "@@@variable") {
        return t;
    }
    argList := toTermList(arguments);
    return makeTerm(fctSymbol, argList); 
};

toTermList := procedure(ts) {
    match (ts) {
        case []       : return [];
        case [ t | r ]: return [ toTerm(t) | toTermList(r) ];
    }
};

parseTerm := procedure(s) {
    return toTerm(parse(s));
};


