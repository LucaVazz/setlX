package org.randoom.setlx.operatorUtilities;

import org.randoom.setlx.exceptions.SetlException;
import org.randoom.setlx.types.Value;
import org.randoom.setlx.utilities.ReturnMessage;
import org.randoom.setlx.utilities.State;

import java.util.List;

/**
 * Interface to override when implementing a class using an iteration.
 */
public interface SetlIteratorExecutionContainer {

    /**
     * Method that gets executed after each iteration-step.
     *
     * @param state              Current state of the running setlX program.
     * @param lastIterationValue Last value generated by the iteration before execution.
     * @return                   ReturnMessage containing the result of the execution.
     * @throws SetlException     Thrown in case of some (user) error.
     */
    ReturnMessage execute(final State state, final Value lastIterationValue) throws SetlException;

    /**
     * Gather all bound and unbound variables in this fragment and its siblings.
     * Optimizes this container, if this can be safely done.
     *
     * @param state            Current state of the running setlX program.
     * @param boundVariables   Variables "assigned" in this fragment.
     * @param unboundVariables Variables not present in bound when used.
     * @param usedVariables    Variables present in bound when used.
     * @return true iff this fragment may be optimized if it is constant.
     */
    boolean collectVariablesAndOptimize(
            final State state,
            final List<String> boundVariables,
            final List<String> unboundVariables,
            final List<String> usedVariables
    );

}

